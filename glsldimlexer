%class-header="include/dim/scanner.hpp"
%baseclass-header="include/dim/scannerbase.hpp"
%lex-source="src/lex.cpp"
%implementation-header="src/scanner.ih"
%namespace=dim

%x string include comment1 comment2

%%

// shader stages
^[ \t]*%-vertex-shader        return Scanner::vertex;
^[ \t]*%-fragment-shader      return Scanner::fragment;
^[ \t]*%-geometry-shader      return Scanner::geometry;
^[ \t]*%-tess-control-shader  return Scanner::tessControl;
^[ \t]*%-tess-eval-shader     return Scanner::tessEval;
^[ \t]*%-compute-shader       return Scanner::compute;

// preprocessor directives
^[ \t]*#version[ \t]*         return Scanner::version;

^[ \t]*#include               begin(StartCondition__::include);          

<include>{
  [ \t]*\"                    begin(StartCondition__::string);
}

<string>{
  \"                          {
                                begin(StartCondition__::INITIAL); 
                                size_t quotePos = matched().find_last_of('\"');
                                
                                setMatched(matched().substr(0, quotePos));
                                
                                std::string path = filename().substr(0, filename().find_last_of('/') + 1);

                                pushStream(path + matched());
                                return Scanner::include;
                              }
                  
  \\.|.                       more();
}

// comments
"/*"                          begin(StartCondition__::comment1);

<comment1>{
  "*/"                        begin(StartCondition__::INITIAL);
  \\.|.                       //more();
  \n                          return Scanner::glslWhitespace;
}

//"//"[\\..]*\n                 return Scanner::glslWhitespace;//         
//"//"(\\.|.)*\n                return Scanner::glslWhitespace;
"//"                          begin(StartCondition__::comment2);
<comment2>{
  \n                          {
                                begin(StartCondition__::INITIAL);
                                return Scanner::glslWhitespace;
                              }
  \\.|.                       
}                 

// end of file
<INITIAL,string,comment1,comment2><<EOF>>    	  {
                                if(popStream())
                                  return Scanner::endOfFile;
                                else
                                  return 0;
                              }
			 
// regular GLSL               
layout                        return Scanner::layout;
location                      return Scanner::location;

in                            |
attribute                     return Scanner::in;
out                           return Scanner::out;

[a-zA-Z_][a-zA-Z0-9_]*        return Scanner::identifier;
[0-9]*                        return Scanner::number;

[^ \t\n]                      return matched()[0];
[ \t\n]                       return Scanner::whitespace;

                              
